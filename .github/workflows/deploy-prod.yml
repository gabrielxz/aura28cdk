name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Prettier Check
        run: npm run format:check

  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint Frontend
        run: npm run lint:frontend
        env:
          ESLINT_USE_FLAT_CONFIG: false

  lint-infrastructure:
    name: Lint Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint Infrastructure
        run: npm run lint:infrastructure
        env:
          ESLINT_USE_FLAT_CONFIG: false

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: lint-frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm run test:frontend

  test-infrastructure:
    name: Test Infrastructure
    runs-on: ubuntu-latest
    needs: lint-infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Swiss Ephemeris layer is now pre-built and referenced from SSM
      # No build step needed here

      - name: Run infrastructure tests
        run: npm run test:infrastructure

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: test-frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials for SSM
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fetch Stripe Price ID from SSM
        id: fetch-price-id
        run: |
          echo "Fetching Stripe default price ID from SSM Parameter Store..."
          PRICE_ID=$(aws ssm get-parameter --name "/aura28/prod/stripe/default-price-id" --query "Parameter.Value" --output text 2>/dev/null || echo "")
          if [ -z "$PRICE_ID" ]; then
            echo "Warning: SSM parameter /aura28/prod/stripe/default-price-id not found"
            echo "Using placeholder for initial deployment: price_REPLACE_WITH_PRODUCTION_ID"
            echo "IMPORTANT: Update the SSM parameter with the actual production price ID after deployment"
            PRICE_ID="price_REPLACE_WITH_PRODUCTION_ID"
          else
            echo "Successfully fetched Stripe price ID from SSM"
          fi
          echo "Using Stripe price ID: price_***" 
          echo "STRIPE_PRICE_ID=$PRICE_ID" >> $GITHUB_OUTPUT

      - name: Build frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ secrets.PROD_NEXT_PUBLIC_COGNITO_USER_POOL_ID }}
          NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ secrets.PROD_NEXT_PUBLIC_COGNITO_CLIENT_ID }}
          NEXT_PUBLIC_COGNITO_DOMAIN: ${{ secrets.PROD_NEXT_PUBLIC_COGNITO_DOMAIN }}
          NEXT_PUBLIC_COGNITO_CUSTOM_DOMAIN: ${{ secrets.PROD_NEXT_PUBLIC_COGNITO_CUSTOM_DOMAIN }}
          NEXT_PUBLIC_COGNITO_REGION: ${{ secrets.PROD_NEXT_PUBLIC_COGNITO_REGION }}
          NEXT_PUBLIC_API_GATEWAY_URL: ${{ secrets.PROD_NEXT_PUBLIC_API_GATEWAY_URL }}
          NEXT_PUBLIC_STRIPE_PRICE_ID: ${{ steps.fetch-price-id.outputs.STRIPE_PRICE_ID }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/out/
          retention-days: 1

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [format-check, build-frontend, test-infrastructure]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/out/

      - name: Build infrastructure
        working-directory: ./infrastructure
        run: npm run build

      # Swiss Ephemeris layer is now pre-built and deployed separately
      # The layer ARN is stored in SSM Parameter Store

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS
        working-directory: ./infrastructure
        run: npx cdk deploy -c env=prod --require-approval never
